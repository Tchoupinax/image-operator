config:
  source:
    disabledTlsCheck: false
  destination:
    disabledTlsCheck: false
    defaultRegistry: ""
    defaultAwsIrsaUsage: false

  api:
    aws:
      pageMax: 4
      itemsByPage: 1000

  credentials:
    createSecret: true
    destinationPassword: ""
    destinationUsername: ""
    secretName: "image-operator"
    sourcePassword: ""
    sourceUsername: ""

  features:
    dockerHubRateLimit:
      enabled: false
      frequencySecond: 60
    copyOnTheFly:
      enabled: false
      namespacesAllowed:
      - "*"

  pullJobNamespace: "image-operator-system"
  skopeo:
    image: "quay.io/containers/skopeo"
    imageAwsIrsa: false
    version: "v1.16.1"
  buildah:
    dangerUsePrivilegedContainers: false
    image: "quay.io/containers/buildah"
    imageAwsIrsa: false
    version: "v1.37.5"
    jobNamespace: "image-operator-system"

  jobDeletionDelaySeconds: 10

  ui:
    enabled: false
    affinity: {}
    tolerations: []
    image:
      repository: "tchoupinax/image-operator-ui"
      tag: "v2.16.1"
      imagePullPolicy: "IfNotPresent"
    apiUrl: "http://image-operator.image-operator.svc:9090/graphql"
    ingress:
      enabled: false
      annotations: {}
      path: ""
      pathType: "Prefix"
      host: ""

monitoring:
  podMonitor:
    enabled: false
    labels: {}
    podMetricsEndpoints:
    - path: "/metrics"
      port: "metrics"

controllerManager:
  replicas: 1
  container:
    image:
      repository: "tchoupinax/image-operator"
      tag: "v2.16.1"
    args:
    - "--leader-elect"
    - "--metrics-bind-address=:8443"
    - "--health-probe-bind-address=:8081"
    resources:
      limits:
        cpu: 500m
        memory: 128Mi
      requests:
        cpu: 10m
        memory: 64Mi
    livenessProbe:
      initialDelaySeconds: 15
      periodSeconds: 20
      httpGet:
        path: /healthz
        port: 8081
    readinessProbe:
      initialDelaySeconds: 5
      periodSeconds: 10
      httpGet:
        path: /readyz
        port: 8081
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - "ALL"
  securityContext:
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  terminationGracePeriodSeconds: 10
  serviceAccountName: image-operator-controller-manager
  affinity: {}
  tolerations: []

# [RBAC]: To enable RBAC (Permissions) configurations
rbac:
  enable: true

# [CRDs]: To enable the CRDs
crd:
  # This option determines whether the CRDs are included
  # in the installation process.
  enable: true

  # Enabling this option adds the "helm.sh/resource-policy": keep
  # annotation to the CRD, ensuring it remains installed even when
  # the Helm release is uninstalled.
  # NOTE: Removing the CRDs will also remove all cert-manager CR(s)
  # (Certificates, Issuers, ...) due to garbage collection.
  keep: true

# [METRICS]: Set to true to generate manifests for exporting metrics.
# To disable metrics export set false, and ensure that the
# ControllerManager argument "--metrics-bind-address=:8443" is removed.
metrics:
  enable: true

# [WEBHOOKS]: Webhooks configuration
# The following configuration is automatically generated from the manifests
# generated by controller-gen. To update run 'make manifests' and
# the edit command with the '--force' flag
webhook:
  enable: true

# [PROMETHEUS]: To enable a ServiceMonitor to export metrics to Prometheus set true
prometheus:
  enable: false

# [CERT-MANAGER]: To enable cert-manager injection to webhooks set true
certmanager:
  enable: true

# [NETWORK POLICIES]: To enable NetworkPolicies set true
networkPolicy:
  enable: false
